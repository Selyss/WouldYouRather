generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContentPreference {
  ALL         // See both sensitive and non-sensitive content
  SAFE_ONLY   // See only non-sensitive content
  ADULT_ONLY  // See only sensitive content
}

enum QuestionCategory {
  ETHICS
  FUN
}

model User {
  id                    String            @id @default(cuid())
  username              String            @unique
  password              String
  contentPreference     ContentPreference @default(SAFE_ONLY)
  createdAt             DateTime          @default(now())
  accounts              Account[]
  questions             Question[]
  sessions              Session[]
  votes                 Vote[]
}

model Question {
  id                 Int              @id @default(autoincrement())
  authorId           String?
  prompt             String           @default("Would you rather...")
  category           QuestionCategory @default(FUN)
  sensitiveContent   Boolean          @default(false)
  score              Float            @default(0.0)
  createdAt          DateTime         @default(now())
  author             User?            @relation(fields: [authorId], references: [id])
  responses          Response[]
  votes              Vote[]
}

model Response {
  id         Int      @id @default(autoincrement())
  questionId Int
  text       String
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@index([questionId, order])
}

model Vote {
  id         Int      @id @default(autoincrement())
  responseId Int
  questionId Int
  userId     String?
  createdAt  DateTime @default(now())
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([responseId, userId])
  @@unique([questionId, userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
